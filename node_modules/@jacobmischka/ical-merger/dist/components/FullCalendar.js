function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import _JSXStyle from "styled-jsx/style";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { render } from 'react-dom';
import Color from 'color';
import $ from 'jquery';
import 'fullcalendar';
import 'fullcalendar/dist/gcal.js';
import 'fullcalendar/dist/fullcalendar.css';
import uniqueId from 'lodash/uniqueId';
import CalendarEvent from './CalendarEvent.js';
import { BREAKPOINTS, COLORS, OPACITIES } from '../constants.js';
var fcButtonHoverBackgroundColor = new Color(COLORS.ACCENT).alpha(OPACITIES.SECONDARY);

var FullCalendar = /*#__PURE__*/function (_Component) {
  _inherits(FullCalendar, _Component);

  var _super = _createSuper(FullCalendar);

  function FullCalendar(props) {
    var _this;

    _classCallCheck(this, FullCalendar);

    _this = _super.call(this, props);
    _this.state = {
      calendarId: uniqueId()
    };
    _this.createCalendar = _this.createCalendar.bind(_assertThisInitialized(_this));
    _this.destroyCalendar = _this.destroyCalendar.bind(_assertThisInitialized(_this));
    _this.getCalendarState = _this.getCalendarState.bind(_assertThisInitialized(_this));
    _this.receiveMessage = _this.receiveMessage.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(FullCalendar, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement("div", {
        className: _JSXStyle.dynamic([["679530180", [COLORS.BACKGROUND, COLORS.ACCENT, COLORS.ACCENT, COLORS.ACCENT, fcButtonHoverBackgroundColor, COLORS.ACCENT, BREAKPOINTS.SMALL_DESKTOP]]]) + " " + "fullcalendar-container"
      }, /*#__PURE__*/React.createElement("div", {
        id: this.state.calendarId,
        className: _JSXStyle.dynamic([["679530180", [COLORS.BACKGROUND, COLORS.ACCENT, COLORS.ACCENT, COLORS.ACCENT, fcButtonHoverBackgroundColor, COLORS.ACCENT, BREAKPOINTS.SMALL_DESKTOP]]])
      }), /*#__PURE__*/React.createElement(_JSXStyle, {
        id: "679530180",
        dynamic: [COLORS.BACKGROUND, COLORS.ACCENT, COLORS.ACCENT, COLORS.ACCENT, fcButtonHoverBackgroundColor, COLORS.ACCENT, BREAKPOINTS.SMALL_DESKTOP]
      }, ["h2{font-size:2em;font-weight:normal;}", ".event-container{background-color:".concat(COLORS.BACKGROUND, ";overflow:hidden;}"), ".fc .fc-toolbar{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}", ".fc .fc-toolbar .fc-left{-webkit-order:1;-ms-flex-order:1;order:1;}", ".fc .fc-toolbar .fc-center{-webkit-order:2;-ms-flex-order:2;order:2;}", ".fc .fc-toolbar .fc-right{-webkit-order:3;-ms-flex-order:3;order:3;}", ".fc button{height:auto;}", ".fc .fc-button{font-size:1.1em;padding:0.5em;}", ".fc .fc-button.fc-state-default{background:transparent;text-shadow:none;box-shadow:none;border:2px solid ".concat(COLORS.ACCENT, ";color:").concat(COLORS.ACCENT, ";}"), ".fc .fc-button.fc-state-active{color:white;background:".concat(COLORS.ACCENT, ";}"), ".fc .fc-button:hover,.fc .fc-button:focus{outline:none;color:white;background:".concat(fcButtonHoverBackgroundColor, ";}"), ".fc .fc-button.fc-state-disabled{cursor:not-allowed;background:none;color:".concat(COLORS.ACCENT, ";}"), ".fc-clear{display:none;}", ".fc-list-view .fc-scroller{height:auto !important;}", ".fc .fc-list-table .fc-list-heading,.fc .fc-list-table .fc-list-heading .fc-widget-header{width:100%;}", "@media (max-width:".concat(BREAKPOINTS.SMALL_DESKTOP, "px){.fc .fc-toolbar{-webkit-box-pack:space-around;-webkit-justify-content:space-around;-ms-flex-pack:space-around;justify-content:space-around;}.fc .fc-toolbar .fc-left{text-align:center;width:100%;}}"), "@media print{h2{font-size:1.25em;}.fc .fc-body .fc-day-number{font-size:0.75em;}.fc .fc-head-container.fc-widget-header,.fc .fc-list-table .fc-widget-header{font-size:0.7em;}.fc .fc-list-table .fc-widget-header{padding:0.2em 0.75em;}.fc .fc-toolbar .fc-center,.fc .fc-toolbar .fc-right{display:none;}.fc-today{background:none !important;}}"]));
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      var _this2 = this;

      var propsToChange = ['apiKey', 'showCalendarNames', 'showLocations', 'showDescriptions', 'showPresenters'];

      for (var _i = 0, _propsToChange = propsToChange; _i < _propsToChange.length; _i++) {
        var prop = _propsToChange[_i];
        if (this.props[prop] !== nextProps[prop]) return true;
      }

      var eventSourcesToAdd = nextProps.eventSources.filter(function (newEventSource) {
        return !_this2.props.eventSources.some(function (oldEventSource) {
          return oldEventSource.googleCalendarId === newEventSource.googleCalendarId && oldEventSource.source === newEventSource.source && oldEventSource.color === newEventSource.color;
        });
      });
      var eventSourcesToRemove = this.props.eventSources.filter(function (oldEventSource) {
        return !nextProps.eventSources.some(function (newEventSource) {
          return newEventSource.googleCalendarId === oldEventSource.googleCalendarId && oldEventSource.source === newEventSource.source && newEventSource.color === oldEventSource.color;
        });
      });
      var calendar = $("#".concat(this.state.calendarId));
      if (eventSourcesToRemove && eventSourcesToRemove.length > 0) calendar.fullCalendar('removeEventSources', eventSourcesToRemove);

      if (eventSourcesToAdd && eventSourcesToAdd.length > 0) {
        eventSourcesToAdd.map(function (eventSourceToAdd) {
          calendar.fullCalendar('addEventSource', eventSourceToAdd);
        });
      }

      if (nextProps.location && nextProps.location.search) {
        var params = new URLSearchParams(nextProps.location.search.slice(1));
        var viewName = params.get('view');
        var viewDate = params.get('date');

        if (this.getGenericViewName(viewName) !== this.getGenericViewName(this.viewName) || viewDate !== this.viewDate) {
          this.viewName = viewName;
          this.viewDate = viewDate;
          $("#".concat(this.state.calendarId)).fullCalendar('changeView', this.getSpecificViewName(viewName), viewDate);
        }
      }

      return false;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.createCalendar();

      if (this.props.trustedOrigins) {
        window.addEventListener('message', this.receiveMessage, false);
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this$props = this.props,
          eventId = _this$props.eventId,
          setActiveEvent = _this$props.setActiveEvent;
      var calendar = $("#".concat(this.state.calendarId));

      if (nextProps.eventId && nextProps.eventId !== eventId) {
        var events = calendar.fullCalendar('clientEvents', nextProps.eventId);

        if (events.length > 0) {
          setActiveEvent(events[0]);
        }
      }
    }
  }, {
    key: "UNSAFE_componentWillUpdate",
    value: function UNSAFE_componentWillUpdate() {
      this.destroyCalendar();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.createCalendar();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.destroyCalendar();
      window.removeEventListener('message', this.receiveMessage);
    }
  }, {
    key: "receiveMessage",
    value: function receiveMessage(event) {
      // Allow extracting calendar state by posting message from trusted origin,
      // useful when calendar is embedded in iframe.
      if (this.props.trustedOrigins && (this.props.trustedOrigins.includes('*') || this.props.trustedOrigins.includes(event.origin)) && event.data === 'getCalendarState') {
        var _this$props2 = this.props,
            customCalendars = _this$props2.customCalendars,
            showCalendarNames = _this$props2.showCalendarNames,
            showLocations = _this$props2.showLocations,
            showDescriptions = _this$props2.showDescriptions,
            showPresenters = _this$props2.showPresenters;
        event.source.postMessage({
          action: 'calendarStateResponse',
          calendarName: this.props.location.pathname.slice(1),
          calendarEvent: this.props.location.hash.slice(1),
          calendarView: this.getGenericViewName(this.viewName),
          calendarDate: this.viewDate,
          customCalendars: customCalendars,
          showCalendarNames: showCalendarNames,
          showLocations: showLocations,
          showDescriptions: showDescriptions,
          showPresenters: showPresenters
        }, event.origin);
      }
    }
  }, {
    key: "getGenericViewName",
    value: function getGenericViewName(viewName) {
      switch (viewName) {
        case 'listWeek':
        case 'basicWeek':
          return 'week';

        default:
          return viewName;
      }
    }
  }, {
    key: "getSpecificViewName",
    value: function getSpecificViewName(viewName) {
      switch (viewName) {
        case 'week':
          return window.innerWidth > BREAKPOINTS.SMALL_DESKTOP ? 'basicWeek' : 'listWeek';

        default:
          return viewName;
      }
    }
  }, {
    key: "getCalendarState",
    value: function getCalendarState(view) {
      if (!this.props.history) return;
      var viewDate = view.intervalStart.toISOString();

      if (this.getSpecificViewName(this.viewName) !== view.name || this.viewDate !== viewDate) {
        var newLocation = Object.assign({}, this.props.location);
        var params = new URLSearchParams(newLocation.search.slice(1));
        params.set('view', view.name);
        params.set('date', viewDate);
        newLocation.search = params.toString();
        this.viewName = view.name;
        this.viewDate = view.intervalStart.toString();
        this.props.history.push(newLocation);
      }
    }
  }, {
    key: "destroyCalendar",
    value: function destroyCalendar() {
      $("#".concat(this.state.calendarId)).fullCalendar('destroy');
    }
  }, {
    key: "createCalendar",
    value: function createCalendar() {
      var _this$props3 = this.props,
          _this$props3$timezone = _this$props3.timezone,
          timezone = _this$props3$timezone === void 0 ? 'local' : _this$props3$timezone,
          eventId = _this$props3.eventId,
          setActiveEventId = _this$props3.setActiveEventId,
          setActiveEvent = _this$props3.setActiveEvent,
          defaultDate = _this$props3.defaultDate,
          showCalendarNames = _this$props3.showCalendarNames,
          showLocations = _this$props3.showLocations,
          showDescriptions = _this$props3.showDescriptions,
          showPresenters = _this$props3.showPresenters;
      var defaultView = this.props.defaultView;
      if (defaultView) defaultView = this.getSpecificViewName(defaultView);else defaultView = window.innerWidth > BREAKPOINTS.SMALL_DESKTOP ? 'month' : 'listWeek';
      this.viewName = defaultView;
      this.viewDate = defaultDate;
      var calendar = $("#".concat(this.state.calendarId));
      var getCalendarState = this.getCalendarState;
      calendar.fullCalendar(Object.assign({
        timezone: timezone,
        googleCalendarApiKey: this.props.apiKey,
        eventSources: this.props.eventSources,
        height: 'auto',
        fixedWeekCount: false,
        header: {
          left: 'title',
          center: 'month,listWeek,basicWeek,agendaDay',
          right: 'today prev,next'
        },
        defaultView: defaultView,
        defaultDate: defaultDate,
        navLinks: true,
        eventRender: function eventRender(calEvent, element, view) {
          if (calEvent.id) {
            var clientEvents = calendar.fullCalendar('clientEvents', function (otherEvent) {
              return otherEvent.id === calEvent.id && momentsEqual(otherEvent.start, calEvent.start) && (otherEvent.allDay && calEvent.allDay || momentsEqual(otherEvent.end, calEvent.end));
            });

            if (clientEvents.length > 1) {
              var firstEvent = clientEvents[0];

              if (firstEvent._id !== calEvent._id) {
                return false;
              }
            }
          }

          var container, calEventElement;

          if (view && view.name && view.name.startsWith('list')) {
            container = document.createElement('tr');
            calEventElement = 'td';
          } else {
            container = document.createElement('div');
            calEventElement = 'div';
          }

          container.className = 'event-container';
          if (view && view.name && view.name.startsWith('agenda')) container.style.position = 'absolute';
          var showCalendarName = showCalendarNames || calEvent.calendar && calEvent.calendar.showCalendarName;
          render( /*#__PURE__*/React.createElement(CalendarEvent, {
            event: calEvent,
            view: view,
            setActiveEventId: setActiveEventId,
            setActiveEvent: setActiveEvent,
            containerElement: calEventElement,
            showCalendarName: showCalendarName,
            showLocation: showLocations,
            showDescription: showDescriptions,
            showPresenters: showPresenters
          }), container);
          return container;
        },
        loading: function loading(isLoading) {
          if (!isLoading) {
            if (eventId) {
              var events = calendar.fullCalendar('clientEvents', eventId);

              if (events.length > 0) {
                setActiveEvent(events[0]);
              }
            }
          }
        },
        viewRender: getCalendarState
      }, this.props.fullcalendarConfig));
    }
  }]);

  return FullCalendar;
}(Component);

export { FullCalendar as default };

function momentsEqual(d1, d2) {
  return d1 && d2 && d1.valueOf() === d2.valueOf();
}

FullCalendar.propTypes = {
  trustedOrigins: PropTypes.array,
  apiKey: PropTypes.string.isRequired,
  eventSources: PropTypes.array.isRequired,
  customCalendars: PropTypes.array,
  setActiveEventId: PropTypes.func,
  setActiveEvent: PropTypes.func,
  eventId: PropTypes.string,
  fullcalendarConfig: PropTypes.object,
  defaultView: PropTypes.string,
  defaultDate: PropTypes.string,
  showCalendarNames: PropTypes.bool,
  showLocations: PropTypes.bool,
  showDescriptions: PropTypes.bool,
  showPresenters: PropTypes.bool,
  location: PropTypes.shape({
    pathname: PropTypes.string,
    hash: PropTypes.string,
    search: PropTypes.string
  }),
  history: PropTypes.shape({
    push: PropTypes.func.isRequired,
    listen: PropTypes.func.isRequired
  })
};