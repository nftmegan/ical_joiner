function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import _JSXStyle from "styled-jsx/style";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { withRouter } from 'react-router';
import { NavLink } from 'react-router-dom';
import FullCalendar from './FullCalendar.js';
import ActiveEvent from './ActiveEvent.js';
import CalendarLegend from './CalendarLegend.js';
import CustomGroupSelector from './CustomGroupSelector.js';
import Subscription from './Subscription.js';
import Options from './Options.js';
import CalendarTree from './CalendarTree.js';
import { BREAKPOINTS } from '../constants.js';
import { getCalendars, filterHiddenCalendars, replaceCalendarMacros, getAliases } from '../utils.js';

var App = /*#__PURE__*/function (_Component) {
  _inherits(App, _Component);

  var _super = _createSuper(App);

  function App(props) {
    var _this;

    _classCallCheck(this, App);

    _this = _super.call(this, props);
    _this.state = {
      TRUSTED_ORIGINS: [],
      GOOGLE_CALENDAR_API_KEY: '',
      calendars: {},
      calendarGroups: {},
      calendarTree: null,
      calendarGroupTree: null,
      aliases: null,
      activeEvent: null,
      activeEventOriginalElement: null,
      loaded: null
    };
    _this.redirectAlias = _this.redirectAlias.bind(_assertThisInitialized(_this));
    _this.handleSetActiveEventId = _this.handleSetActiveEventId.bind(_assertThisInitialized(_this));
    _this.handleSetActiveEvent = _this.handleSetActiveEvent.bind(_assertThisInitialized(_this));
    _this.handleUnsetActiveEvent = _this.handleUnsetActiveEvent.bind(_assertThisInitialized(_this));
    _this.handleChangeCustomCalendarIds = _this.handleChangeCustomCalendarIds.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(App, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      fetch(this.props.envFile).then(function (response) {
        return response.json();
      }).then(function (dotenv) {
        var searchParams = new URLSearchParams(_this2.props.search.slice(1));
        var keys = searchParams.getAll('key');
        dotenv = replaceCalendarMacros(dotenv);
        dotenv = filterHiddenCalendars(dotenv, keys);
        var aliases = getAliases(dotenv);

        _this2.setState(Object.assign(dotenv, {
          loaded: true,
          aliases: aliases
        }), function () {
          _this2.redirectAlias();
        });

        if (dotenv.GOOGLE_ANALYTICS_TRACKING_ID && window.ga) {
          window.ga('create', dotenv.GOOGLE_ANALYTICS_TRACKING_ID, 'auto');
          window.ga('send', 'pageview');
        }
      }).catch(function (err) {
        console.error(err);

        _this2.setState({
          loaded: false
        });
      });
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (!nextProps.eventId && this.state.activeEvent) this.handleUnsetActiveEvent(false);
      this.redirectAlias();
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          calendarId = _this$props.calendarId,
          eventId = _this$props.eventId,
          search = _this$props.search,
          location = _this$props.location,
          history = _this$props.history;
      var params = new URLSearchParams(search);
      var customCalendar = {
        calname: 'Custom Group',
        calendars: params.getAll('customCalendar')
      };

      var _getCalendars = getCalendars(calendarId, this.state.calendars, this.state.calendarGroups, customCalendar),
          calendar = _getCalendars.calendar,
          calendars = _getCalendars.calendars,
          calendarMap = _getCalendars.calendarMap,
          eventSources = _getCalendars.eventSources;

      var allCalendarLikes = Object.assign({}, this.state.calendars, this.state.calendarGroups);
      var searchParams = new URLSearchParams(this.props.search.slice(1));
      var calendarView = searchParams.get('view');
      var defaultDate = searchParams.get('date');

      if (calendar && calendars && eventSources) {
        var activeEventNode = this.state.activeEvent ? /*#__PURE__*/React.createElement(ActiveEvent, {
          event: this.state.activeEvent,
          originalElement: this.state.activeEventOriginalElement,
          onClose: this.handleUnsetActiveEvent
        }) : null;
        var groupedCalendarListItems = /*#__PURE__*/React.createElement(CalendarTree, {
          calendars: allCalendarLikes,
          calendarTree: this.state.calendarGroupTree,
          container: "section",
          label: /*#__PURE__*/React.createElement("h3", null, "Calendar groups"),
          keyPrefix: "calendar-group-list-tree",
          render: function render(id, cal) {
            return /*#__PURE__*/React.createElement("li", {
              key: "grouped-calendar-list-items-".concat(id)
            }, /*#__PURE__*/React.createElement(NavLink, {
              to: {
                pathname: "/".concat(id),
                search: search
              }
            }, cal.calname));
          }
        }, /*#__PURE__*/React.createElement("li", {
          key: "custom"
        }, /*#__PURE__*/React.createElement(NavLink, {
          to: {
            pathname: '/custom',
            search: search
          }
        }, "Custom Group")));
        var calendarListTree = calendarId === 'custom' ? /*#__PURE__*/React.createElement(CustomGroupSelector, {
          calendars: this.state.calendars,
          calendarTree: this.state.calendarTree,
          customCalendarIds: customCalendar.calendars,
          handleChangeCustomCalendarIds: this.handleChangeCustomCalendarIds
        }) : /*#__PURE__*/React.createElement(CalendarTree, {
          calendars: calendarMap,
          container: "section",
          label: /*#__PURE__*/React.createElement("h3", null, "Calendars in ", calendar.calname),
          keyPrefix: "calendar-list-tree",
          render: function render(id, cal) {
            return /*#__PURE__*/React.createElement("li", {
              key: "calendar-list-items-".concat(id)
            }, /*#__PURE__*/React.createElement(NavLink, {
              to: {
                pathname: "/".concat(id),
                search: search
              }
            }, cal.calname));
          }
        }); // `${window.location.origin}/${this.props.icsFilename}${window.location.search}`

        var icsUrl;

        if (calendar.url && !calendar.calendars) {
          icsUrl = calendar.url;
        } else {
          var _search = window.location.search;
          var filename;

          if (calendarId === 'custom') {
            filename = 'combine.ics';
            if (_search) _search += '&';else _search = '?';
            _search += customCalendar.calendars.filter(function (id) {
              return id in _this3.state.calendars;
            }).map(function (calId) {
              var cal = _this3.state.calendars[calId];

              if (cal.url) {
                return "urls[]=".concat(cal.url);
              } else if (cal.subCalendars) {
                return cal.subCalendars.map(function (subCal) {
                  return "urls[]=".concat(subCal.url);
                }).join('&');
              }
            }).join('&');
          } else {
            filename = "".concat(calendarId, ".ics");
          }

          icsUrl = "".concat(window.location.origin, "/").concat(filename).concat(_search);
        }

        var showCalendarNames = searchParams.has('showCalendarNames') && searchParams.get('showCalendarNames') !== 'false';
        var showLocations = searchParams.has('showLocations') && searchParams.get('showLocations') !== 'false';
        var showDescriptions = searchParams.has('showDescriptions') && searchParams.get('showDescriptions') !== 'false';
        var showPresenters = searchParams.has('showPresenters') && searchParams.get('showPresenters') !== 'false';
        return /*#__PURE__*/React.createElement("div", {
          "data-iframe-height": true,
          className: _JSXStyle.dynamic([["3708459230", [BREAKPOINTS.SMALL_DESKTOP, BREAKPOINTS.LARGE_DESKTOP]]])
        }, activeEventNode, /*#__PURE__*/React.createElement("h1", {
          className: _JSXStyle.dynamic([["3708459230", [BREAKPOINTS.SMALL_DESKTOP, BREAKPOINTS.LARGE_DESKTOP]]])
        }, calendar.calname), /*#__PURE__*/React.createElement(FullCalendar, {
          trustedOrigins: this.state.TRUSTED_ORIGINS,
          apiKey: this.state.GOOGLE_CALENDAR_API_KEY,
          eventSources: eventSources,
          customCalendars: customCalendar.calendars,
          setActiveEvent: this.handleSetActiveEvent,
          setActiveEventId: this.handleSetActiveEventId,
          defaultView: calendarView,
          defaultDate: defaultDate,
          eventId: eventId,
          location: location,
          history: history,
          showCalendarNames: showCalendarNames,
          showLocations: showLocations,
          showDescriptions: showDescriptions,
          showPresenters: showPresenters
        }), /*#__PURE__*/React.createElement(CalendarLegend, {
          calendars: calendars,
          calname: calendar.calname
        }), /*#__PURE__*/React.createElement(Subscription, {
          url: icsUrl
        }), (groupedCalendarListItems || calendarListTree) && /*#__PURE__*/React.createElement("div", {
          className: _JSXStyle.dynamic([["3708459230", [BREAKPOINTS.SMALL_DESKTOP, BREAKPOINTS.LARGE_DESKTOP]]]) + " " + "calendar-nav-container"
        }, /*#__PURE__*/React.createElement("h2", {
          className: _JSXStyle.dynamic([["3708459230", [BREAKPOINTS.SMALL_DESKTOP, BREAKPOINTS.LARGE_DESKTOP]]])
        }, "Other calendars"), /*#__PURE__*/React.createElement("nav", {
          className: _JSXStyle.dynamic([["3708459230", [BREAKPOINTS.SMALL_DESKTOP, BREAKPOINTS.LARGE_DESKTOP]]]) + " " + "calendar-nav"
        }, groupedCalendarListItems, calendarListTree)), /*#__PURE__*/React.createElement(Options, {
          location: location,
          history: history
        }), /*#__PURE__*/React.createElement(_JSXStyle, {
          id: "3708459230",
          dynamic: [BREAKPOINTS.SMALL_DESKTOP, BREAKPOINTS.LARGE_DESKTOP]
        }, ["h1.__jsx-style-dynamic-selector{font-size:2.75em;font-weight:500;text-align:center;}", "h2.__jsx-style-dynamic-selector{font-size:2em;font-weight:normal;}", "a.active{pointer-events:none;-webkit-text-decoration:none;text-decoration:none;cursor:auto;color:black;}", ".calendar-nav-container.__jsx-style-dynamic-selector{padding:0 2em;}", "@media (min-width:".concat(BREAKPOINTS.SMALL_DESKTOP, "px){.calendar-nav-container.__jsx-style-dynamic-selector{padding:0 3em;}}"), "@media (min-width:".concat(BREAKPOINTS.LARGE_DESKTOP, "px){.calendar-nav-container.__jsx-style-dynamic-selector{padding:0 4em;}}"), ".calendar-nav.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:space-around;-webkit-justify-content:space-around;-ms-flex-pack:space-around;justify-content:space-around;}", ".calendar-nav.__jsx-style-dynamic-selector section.__jsx-style-dynamic-selector{-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;-webkit-flex-shrink:1;-ms-flex-negative:1;flex-shrink:1;min-width:15em;}", "@media print{h1.__jsx-style-dynamic-selector{margin:0;font-size:2em;}h2.__jsx-style-dynamic-selector{font-size:1.5em;}.calendar-nav-container.__jsx-style-dynamic-selector{display:none;}}"]));
      } else {
        switch (this.state.loaded) {
          case null:
          default:
            return /*#__PURE__*/React.createElement("div", {
              className: "jsx-2199600528" + " " + "loading-container"
            }, /*#__PURE__*/React.createElement("img", {
              src: "/assets/spinner.gif",
              alt: "Loading",
              className: "jsx-2199600528"
            }), /*#__PURE__*/React.createElement(_JSXStyle, {
              id: "2199600528"
            }, [".loading-container.jsx-2199600528{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;width:100%;height:100%;}"]));

          case true:
            return /*#__PURE__*/React.createElement("p", null, "No calendar ", /*#__PURE__*/React.createElement("code", null, calendarId), " found.");

          case false:
            return /*#__PURE__*/React.createElement("p", null, "There was a problem loading calendar data.");
        }
      }
    }
  }, {
    key: "redirectAlias",
    value: function redirectAlias() {
      var aliases = this.state.aliases;
      var _this$props2 = this.props,
          calendarId = _this$props2.calendarId,
          history = _this$props2.history,
          location = _this$props2.location;

      if (aliases && aliases.has(calendarId)) {
        var newLocation = Object.assign({}, location, {
          pathname: "/".concat(aliases.get(calendarId))
        });
        history.push(newLocation);
      }
    }
  }, {
    key: "handleSetActiveEventId",
    value: function handleSetActiveEventId(id, container) {
      var newLocation = Object.assign({}, this.props.location);
      newLocation.hash = "".concat(id);
      this.props.history.push(newLocation);

      if (container) {
        this.setState({
          activeEventOriginalElement: container
        });
      }
    }
  }, {
    key: "handleSetActiveEvent",
    value: function handleSetActiveEvent(calEvent) {
      this.setState({
        activeEvent: calEvent
      });
    }
  }, {
    key: "handleUnsetActiveEvent",
    value: function handleUnsetActiveEvent() {
      var shouldPush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (shouldPush) {
        this.handleSetActiveEventId('');
      }

      this.setState({
        activeEvent: null,
        activeEventOriginalPosition: null
      });
    }
  }, {
    key: "handleChangeCustomCalendarIds",
    value: function handleChangeCustomCalendarIds(event) {
      var checkbox = event.target;
      var params = new URLSearchParams(this.props.location.search);
      var customCalendars = params.getAll('customCalendar');
      if (checkbox.checked) customCalendars.push(checkbox.value);else customCalendars.splice(customCalendars.indexOf(checkbox.value), 1);
      params.delete('customCalendar');

      var _iterator = _createForOfIteratorHelper(customCalendars),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var cal = _step.value;
          params.append('customCalendar', cal);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.props.history.push(Object.assign({}, this.props.location, {
        search: params.toString()
      }));
    }
  }]);

  return App;
}(Component);

App.propTypes = {
  envFile: PropTypes.string.isRequired,
  calendarId: PropTypes.string,
  eventId: PropTypes.string,
  search: PropTypes.string,
  location: PropTypes.shape({
    hash: PropTypes.string
  }),
  history: PropTypes.shape({
    push: PropTypes.func.isRequired,
    listen: PropTypes.func.isRequired
  }).isRequired
};
export default withRouter(App);