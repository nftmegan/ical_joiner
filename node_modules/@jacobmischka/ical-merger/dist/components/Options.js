function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import _JSXStyle from "styled-jsx/style";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import * as localforage from 'localforage';
import { camelCaseToWords } from '../utils.js';

var Options = /*#__PURE__*/function (_Component) {
  _inherits(Options, _Component);

  var _super = _createSuper(Options);

  function Options() {
    var _this;

    _classCallCheck(this, Options);

    _this = _super.call(this);
    _this.options = ['showCalendarNames', 'showLocations', 'showPresenters', 'showDescriptions'];
    _this.handleOptionChange = _this.handleOptionChange.bind(_assertThisInitialized(_this));
    _this.getStoredOptions = _this.getStoredOptions.bind(_assertThisInitialized(_this));
    _this.toggleOption = _this.toggleOption.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Options, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.getStoredOptions();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var params = new URLSearchParams(location.search);
      var inputs = this.options.map(function (option) {
        return /*#__PURE__*/React.createElement("label", {
          key: option
        }, /*#__PURE__*/React.createElement("input", {
          type: "checkbox",
          value: option,
          checked: params.has(option),
          onChange: _this2.handleOptionChange
        }), camelCaseToWords(option));
      });
      return /*#__PURE__*/React.createElement("div", {
        className: "jsx-811589960"
      }, inputs, /*#__PURE__*/React.createElement(_JSXStyle, {
        id: "811589960"
      }, ["div.jsx-811589960{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:space-around;-webkit-justify-content:space-around;-ms-flex-pack:space-around;justify-content:space-around;}"]));
    }
  }, {
    key: "getStoredOptions",
    value: function getStoredOptions() {
      var _this3 = this;

      var promises = this.options.map(function (option) {
        return localforage.getItem(option).then(function (val) {
          return [option, val];
        }).catch(function (err) {
          console.error("Failed fetching stored option for ".concat(option), err);
        });
      });
      Promise.all(promises).then(function (options) {
        var _this3$props = _this3.props,
            location = _this3$props.location,
            history = _this3$props.history;
        var params = new URLSearchParams(location.search);
        var paramsChanged = false;

        var _iterator = _createForOfIteratorHelper(options),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
                option = _step$value[0],
                value = _step$value[1];

            if (value && !params.has(option)) {
              params.set(option, true);
              paramsChanged = true;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (paramsChanged) {
          var newLocation = Object.assign({}, location, {
            search: "?".concat(params.toString())
          });
          history.push(newLocation);
        }
      }).catch(function (err) {
        console.error("Failed fetching all options somehow? Don't think this should happen", err);
      });
    }
  }, {
    key: "handleOptionChange",
    value: function handleOptionChange(event) {
      var option = event.target.value;
      this.toggleOption(option);
    }
  }, {
    key: "toggleOption",
    value: function toggleOption(option, checked) {
      var _this$props = this.props,
          location = _this$props.location,
          history = _this$props.history;
      var params = new URLSearchParams(location.search);
      var enabled = checked != null ? checked : !params.has(option);

      if (enabled) {
        params.set(option, true);
        localforage.setItem(option, true).catch(function (err) {
          console.error("Failed setting stored option ".concat(option), err);
        });
      } else {
        params.delete(option);
        localforage.removeItem(option).catch(function (err) {
          console.error("Failed removing stored option ".concat(option), err);
        });
      }

      var newLocation = Object.assign({}, location, {
        search: "?".concat(params.toString())
      });
      history.push(newLocation);
    }
  }]);

  return Options;
}(Component);

export { Options as default };
Options.propTypes = {
  location: PropTypes.shape({
    search: PropTypes.string
  }),
  history: PropTypes.shape({
    push: PropTypes.func.isRequired
  })
};