function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/** @format */

/* eslint-env node */
var ICAL = require("ical.js");

var _require = require("../package.json"),
    icalMerger = _require.icalMerger;

function fullCalendarEventsToIcs(events) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var calendar = new ICAL.Component(["vcalendar", [], []]);
  calendar.updatePropertyWithValue("prodid", icalMerger.prodid);
  calendar.updatePropertyWithValue("version", icalMerger.version);
  var tzid = options.timezone;

  if (!tzid) {
    var moment = require('moment-timezone');

    tzid = moment.tz.guess();
  }

  calendar.updatePropertyWithValue("x-wr-timezone", tzid);
  var vtimezone = new ICAL.Component('vtimezone');
  var timezone = new ICAL.Timezone({
    component: vtimezone,
    tzid: tzid
  });
  if (options.calname) calendar.updatePropertyWithValue("x-wr-calname", options.calname);
  if (options.caldesc) calendar.updatePropertyWithValue("x-wr-caldesc", options.caldesc);

  var _iterator = _createForOfIteratorHelper(events),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var fcEvent = _step.value;
      var vevent = new ICAL.Component("vevent");
      var event = new ICAL.Event(vevent);
      event.startDate = new ICAL.Time(getTimeData(fcEvent.start), timezone);
      event.endDate = new ICAL.Time(getTimeData(fcEvent.end), timezone);
      event.description = fcEvent.title;
      event.uid = fcEvent.id;
      calendar.addSubcomponent(vevent);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return calendar.toString();
}

function getTimeData(date) {
  date = new Date(date);
  return {
    year: date.getFullYear(),
    month: date.getMonth() + 1,
    day: date.getDate(),
    hour: date.getHours(),
    minute: date.getMinutes(),
    second: date.getSeconds()
  };
}

module.exports = fullCalendarEventsToIcs;
