'use strict';

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = o[Symbol.iterator]();
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

/** @format */

/* eslint-env node */
var ICAL = require("ical.js");

var _require = require("../package.json"),
    icalMerger = _require.icalMerger;

function merge(inputs) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (!Array.isArray(inputs)) inputs = Array.prototype.slice.call(arguments);
  var calendar;

  var _iterator = _createForOfIteratorHelper(inputs),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var input = _step.value;

      try {
        var jcal = ICAL.parse(input);
        var cal = new ICAL.Component(jcal);

        if (!calendar) {
          calendar = cal;
          calendar.updatePropertyWithValue("prodid", icalMerger.prodid);
          calendar.updatePropertyWithValue("version", icalMerger.version);
          if (options.calname) calendar.updatePropertyWithValue("x-wr-calname", options.calname);
          if (options.timezone) calendar.updatePropertyWithValue("x-wr-timezone", options.timezone);
          if (options.caldesc) calendar.updatePropertyWithValue("x-wr-caldesc", options.caldesc);
        } else {
          var _iterator2 = _createForOfIteratorHelper(cal.getAllSubcomponents("vevent")),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var vevent = _step2.value;
              calendar.addSubcomponent(vevent);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      } catch (e) {
        console.error("Failed to merge: ".concat(e, "\n\nWith input: ").concat(input));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (!calendar) {
    console.error("No icals parsed successfully");
    return;
  }

  return calendar.toString();
}

module.exports = merge;
