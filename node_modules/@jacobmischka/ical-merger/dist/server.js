'use strict';

var express = require('express');
var url = require('url');
var path = require('path');
var nodeFetch = require('node-fetch');
var ical = require('ical.js');
var momentTimezone = require('moment-timezone');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var express__default = /*#__PURE__*/_interopDefaultLegacy(express);
var url__default = /*#__PURE__*/_interopDefaultLegacy(url);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var nodeFetch__default = /*#__PURE__*/_interopDefaultLegacy(nodeFetch);
var ical__default = /*#__PURE__*/_interopDefaultLegacy(ical);
var momentTimezone__default = /*#__PURE__*/_interopDefaultLegacy(momentTimezone);

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = o[Symbol.iterator]();
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var name = "@jacobmischka/ical-merger";
var version = "6.0.2";
var description = "Merges multiple ical .ics files into one for importing elsewhere";
var main = "dist/ical-merger.cjs.js";
var bundle = "dist/ical-merger.bundle.js";
var module$1 = "dist/ical-merger.js";
var scripts = {
	start: "NODE_ENV=production node dist/server.js",
	serve: "PORT=4444 nodemon --watch ./dist dist/server.js",
	build: "npm-run-all clean --parallel build:*",
	"now-build": "NODE_ENV=production webpack --mode production",
	"build:webpack": "NODE_ENV=production webpack --mode production",
	"build:rollup": "run-p rollup:*",
	"build:components": "NODE_ENV=production babel ./src/components --out-dir ./dist/components",
	"build:helpers": "NODE_ENV=production babel ./src/constants.js -o ./dist/constants.js && NODE_ENV=production babel ./src/utils.js -o ./dist/utils.js && NODE_ENV=production babel ./src/server-utils.js -o ./dist/server-utils.js && NODE_ENV=production babel ./src/fullcalendar-to-ics.js -o ./dist/fullcalendar-to-ics.js",
	"rollup:node": "rollup -c",
	"rollup:bundle": "rollup -c rollup.config.bundle.js",
	"rollup:server": "rollup -c rollup.config.server.js",
	watch: "npm-run-all clean --parallel watch:*",
	"watch:webpack": "webpack --progress --color --watch --mode development",
	"watch:rollup": "run-p rollup-watch:*",
	"watch:components": "NODE_ENV=production babel ./src/components --watch --out-dir ./dist/components",
	"watch:constants": "NODE_ENV=production babel ./src/constants.js --watch -o ./dist/constants.js",
	"watch:utils": "NODE_ENV=production babel ./src/utils.js --watch -o ./dist/utils.js",
	"rollup-watch:node": "rollup -cw",
	"rollup-watch:bundle": "rollup -c rollup.config.bundle.js -w",
	"rollup-watch:server": "rollup -c rollup.config.server.js -w",
	clean: "rm -rf ./dist ./public ; mkdir -p dist",
	lint: "eslint src",
	"analyze:bundle": "webpack-bundle-analyzer ./public/js/stats.json",
	deploy: "echo '!.env.json' >> .npmignore ; now ; sed -i '$ d' .npmignore",
	prepublish: "in-publish && npm-run-all lint && npm-run-all build || not-in-publish"
};
var bin = {
	"ical-merge": "./cli.js"
};
var repository = {
	url: "git@github.com:jacobmischka/ics-merger.git",
	type: "git"
};
var engines = {
	node: ">6.8.1"
};
var browserslist = [
	"> 1%",
	"last 2 versions",
	"IE 9"
];
var author = "Jacob Mischka <jacob@mischka.me>";
var license = "MIT";
var dependencies = {
	clipboard: "^2.0.1",
	color: "^3.0.0",
	"color-string": "^1.4.0",
	express: "^4.14.0",
	fullcalendar: "^3.10.1",
	"ical.js": "^1.2.2",
	"iframe-resizer": "^3.5.14",
	jquery: "^3.4.1",
	linkifyjs: "^2.1.9",
	localforage: "^1.5.6",
	lodash: "^4.17.4",
	"moment-timezone": "^0.5.26",
	"node-fetch": "^2.1.2",
	"prop-types": "^15.5.6",
	react: "^17.0.0",
	"react-addons-transition-group": "^15.5.2",
	"react-dom": "^17.0.0",
	"react-feather": "^1.1.0",
	"react-router": "^4.0.0",
	"react-router-dom": "^4.0.0",
	striptags: "^3.1.1",
	"styled-jsx": "3.3.2",
	"typeface-noto-sans": "^0.0.54"
};
var devDependencies = {
	"@babel/cli": "^7.12.10",
	"@babel/core": "^7.12.10",
	"@babel/plugin-external-helpers": "^7.12.1",
	"@babel/plugin-proposal-class-properties": "^7.12.1",
	"@babel/preset-env": "^7.12.11",
	"@babel/preset-flow": "^7.12.1",
	"@babel/preset-react": "^7.12.10",
	"apply-loader": "^2.0.0",
	autoprefixer: "^8.6.3",
	"babel-eslint": "^10.1.0",
	"babel-loader": "^8.2.2",
	"babel-plugin-transform-class-properties": "^6.24.1",
	"classlist-polyfill": "^1.0.3",
	"core-js": "^3.8.3",
	"css-loader": "^0.28.0",
	"element-dataset": "^2.2.2",
	"es6-promise": "^4.0.5",
	eslint: "^4.4.1",
	"eslint-plugin-react": "^7.2.1",
	"file-loader": "^1.1.5",
	"flow-bin": "^0.75.0",
	"flow-typed": "^2.1.5",
	"html-webpack-plugin": "^3.2.0",
	"in-publish": "^2.0.0",
	"mini-css-extract-plugin": "^0.4.0",
	nodemon: "^1.11.0",
	"npm-run-all": "^4.0.1",
	raf: "^3.3.2",
	"regenerator-runtime": "^0.13.7",
	rollup: "^2.38.0",
	"rollup-plugin-babel": "^4.4.0",
	"rollup-plugin-buble": "^0.19.2",
	"rollup-plugin-commonjs": "^10.1.0",
	"rollup-plugin-json": "^4.0.0",
	"rollup-plugin-node-resolve": "^5.2.0",
	"style-loader": "^0.21.0",
	"url-search-params-polyfill": "^4.0.0",
	webpack: "^4.12.0",
	"webpack-bundle-analyzer": "^2.1.1",
	"webpack-cli": "^3.0.8",
	"webpack-dev-server": "^3.1.4",
	"whatwg-fetch": "^2.0.0"
};
var icalMerger = {
	prodid: "-//Jacob Mischka//iCal Merger//EN",
	version: "2.0"
};
var _package = {
	name: name,
	version: version,
	description: description,
	main: main,
	bundle: bundle,
	module: module$1,
	scripts: scripts,
	bin: bin,
	repository: repository,
	engines: engines,
	browserslist: browserslist,
	author: author,
	license: license,
	dependencies: dependencies,
	devDependencies: devDependencies,
	icalMerger: icalMerger
};

var _package$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  name: name,
  version: version,
  description: description,
  main: main,
  bundle: bundle,
  module: module$1,
  scripts: scripts,
  bin: bin,
  repository: repository,
  engines: engines,
  browserslist: browserslist,
  author: author,
  license: license,
  dependencies: dependencies,
  devDependencies: devDependencies,
  icalMerger: icalMerger,
  'default': _package
});

function getCjsExportFromNamespace (n) {
	return n && n['default'] || n;
}

var require$$0 = getCjsExportFromNamespace(_package$1);

/** @format */

/* eslint-env node */

var icalMerger$1 = require$$0.icalMerger;

function fullCalendarEventsToIcs(events) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var calendar = new ical__default['default'].Component(["vcalendar", [], []]);
  calendar.updatePropertyWithValue("prodid", icalMerger$1.prodid);
  calendar.updatePropertyWithValue("version", icalMerger$1.version);
  var tzid = options.timezone;

  if (!tzid) {
    var moment = momentTimezone__default['default'];
    tzid = moment.tz.guess();
  }

  calendar.updatePropertyWithValue("x-wr-timezone", tzid);
  var vtimezone = new ical__default['default'].Component('vtimezone');
  var timezone = new ical__default['default'].Timezone({
    component: vtimezone,
    tzid: tzid
  });
  if (options.calname) calendar.updatePropertyWithValue("x-wr-calname", options.calname);
  if (options.caldesc) calendar.updatePropertyWithValue("x-wr-caldesc", options.caldesc);

  var _iterator = _createForOfIteratorHelper(events),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var fcEvent = _step.value;
      var vevent = new ical__default['default'].Component("vevent");
      var event = new ical__default['default'].Event(vevent);
      event.startDate = new ical__default['default'].Time(getTimeData(fcEvent.start), timezone);
      event.endDate = new ical__default['default'].Time(getTimeData(fcEvent.end), timezone);
      event.description = fcEvent.title;
      event.uid = fcEvent.id;
      calendar.addSubcomponent(vevent);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return calendar.toString();
}

function getTimeData(date) {
  date = new Date(date);
  return {
    year: date.getFullYear(),
    month: date.getMonth() + 1,
    day: date.getDate(),
    hour: date.getHours(),
    minute: date.getMinutes(),
    second: date.getSeconds()
  };
}

var fullcalendarToIcs = fullCalendarEventsToIcs;

/* eslint-env node */

function setHeaders(res) {
  res.setHeader('Expires', 'Mon, 01 Jan 1990 00:00:00 GMT');
  res.setHeader('Date', new Date().toGMTString());
  res.setHeader('Content-Type', 'text/calendar; charset=UTF-8');
  res.setHeader('Cache-Control', 'no-cache, no-store, max-age=0, must-revalidate');
  res.setHeader('Pragma', 'no-cache');
}

function getIcalsFromUrls(urls) {
  var promises = [];

  var _iterator = _createForOfIteratorHelper(urls),
      _step;

  try {
    var _loop = function _loop() {
      var url = _step.value;
      promises.push(nodeFetch__default['default'](url).then(function (response) {
        return response.text();
      }).catch(function (err) {
        console.error("Error reading ".concat(url, ": ").concat(err));
        return err;
      }));
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return Promise.all(promises);
}

function getIcalsFromFullCalendarEventSourceCalendars(calendars) {
  var promises = [];

  var _iterator2 = _createForOfIteratorHelper(calendars),
      _step2;

  try {
    var _loop2 = function _loop2() {
      var calendar = _step2.value;
      promises.push(nodeFetch__default['default'](calendar.source).then(function (response) {
        return response.json();
      }).then(function (events) {
        return fullcalendarToIcs(events, calendar);
      }).catch(function (err) {
        console.error('Error parsing calendar', err, calendar);
        return err;
      }));
    };

    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      _loop2();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return Promise.all(promises);
}

function isCalendarVisible(calendar, keys) {
  if (!Array.isArray(keys)) keys = [keys];
  return calendar && (!calendar.private || Boolean(calendar.key) && typeof calendar.key === 'string' && keys.includes(calendar.key));
}

function getDeepCalendarIdsFromSubGroups(calendarGroup, allCalendars, allCalendarGroups) {
  var calendarIds = [];

  if (calendarGroup.calendars && calendarGroup.calendars.length > 0) {
    calendarIds.push.apply(calendarIds, _toConsumableArray(calendarGroup.calendars));
  }

  if (calendarGroup.subGroups && calendarGroup.subGroups.length > 0) {
    var subGroups = calendarGroup.subGroups.map(function (id) {
      return allCalendarGroups[id];
    });

    var _iterator3 = _createForOfIteratorHelper(subGroups),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var subGroup = _step3.value;
        calendarIds.push.apply(calendarIds, _toConsumableArray(getDeepCalendarIdsFromSubGroups(subGroup, allCalendars, allCalendarGroups)));
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }

  return calendarIds;
}

var serverUtils = {
  setHeaders: setHeaders,
  getIcalsFromUrls: getIcalsFromUrls,
  getIcalsFromFullCalendarEventSourceCalendars: getIcalsFromFullCalendarEventSourceCalendars,
  isCalendarVisible: isCalendarVisible,
  getDeepCalendarIdsFromSubGroups: getDeepCalendarIdsFromSubGroups
};

/** @format */

/* eslint-env node */

var icalMerger$2 = require$$0.icalMerger;

function merge(inputs) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (!Array.isArray(inputs)) inputs = Array.prototype.slice.call(arguments);
  var calendar;

  var _iterator = _createForOfIteratorHelper(inputs),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var input = _step.value;

      try {
        var jcal = ical__default['default'].parse(input);
        var cal = new ical__default['default'].Component(jcal);

        if (!calendar) {
          calendar = cal;
          calendar.updatePropertyWithValue("prodid", icalMerger$2.prodid);
          calendar.updatePropertyWithValue("version", icalMerger$2.version);
          if (options.calname) calendar.updatePropertyWithValue("x-wr-calname", options.calname);
          if (options.timezone) calendar.updatePropertyWithValue("x-wr-timezone", options.timezone);
          if (options.caldesc) calendar.updatePropertyWithValue("x-wr-caldesc", options.caldesc);
        } else {
          var _iterator2 = _createForOfIteratorHelper(cal.getAllSubcomponents("vevent")),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var vevent = _step2.value;
              calendar.addSubcomponent(vevent);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      } catch (e) {
        console.error("Failed to merge: ".concat(e, "\n\nWith input: ").concat(input));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (!calendar) {
    console.error("No icals parsed successfully");
    return;
  }

  return calendar.toString();
}

var src = merge;

var TRUSTED_ORIGINS = [
	"https://intranet.mcwanesthesiology.org",
	"https://intranet.mcw-anesthesiology.tech",
	"https://www.residentprogram.com"
];
var GOOGLE_CALENDAR_API_KEY = "AIzaSyA2b7fRua-Cnw22xkI7zZgVZfYTdLMMFjM";
var GOOGLE_ANALYTICS_TRACKING_ID = "UA-70580800-4";
var FIREBASE_CONFIG = {
	apiKey: "AIzaSyBoLLcWZL9gXAsQ3O0qvRuwa_PstlWy9y0",
	authDomain: "mcw-anesthesiology-calendar.firebaseapp.com",
	databaseURL: "https://mcw-anesthesiology-calendar.firebaseio.com",
	projectId: "mcw-anesthesiology-calendar",
	storageBucket: "mcw-anesthesiology-calendar.appspot.com",
	messagingSenderId: "185259793663"
};
var calendars = {
	departmentGeneral: {
		calname: "Anesthesiology General",
		caldesc: "General and common MCW Anesthesiology events",
		timezone: "America/Chicago",
		color: "#888",
		googleCalendarId: "mcw.anesthesiology.dept@gmail.com",
		url: "https://calendar.google.com/calendar/ical/mcw.anesthesiology.dept%40gmail.com/public/basic.ics"
	},
	administrativeGeneral: {
		calname: "Administrative General",
		caldesc: "Administrative General",
		timezone: "America/Chicago",
		color: "#006f66",
		"private": true,
		key: "intranet",
		googleCalendarId: "ims8ot412ggb9or4uikads329s@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/ims8ot412ggb9or4uikads329s%40group.calendar.google.com/public/basic.ics"
	},
	cardioGeneral: {
		calname: "Cardiothoracic General",
		caldesc: "Cardiothoracic General",
		timezone: "America/Chicago",
		color: "#ff5654",
		googleCalendarId: "6qki91pquh3jbv2cpoq3rro9vs@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/6qki91pquh3jbv2cpoq3rro9vs%40group.calendar.google.com/public/basic.ics"
	},
	criticalCareGeneral: {
		calname: "Critical Care General",
		caldesc: "Critical Care General",
		timezone: "America/Chicago",
		color: "#c84d59",
		googleCalendarId: "694t918qu5d2m3i7o6g519idb0@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/694t918qu5d2m3i7o6g519idb0%40group.calendar.google.com/public/basic.ics"
	},
	neuroGeneral: {
		calname: "Neuroanesthesia General",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#58d7f1",
		googleCalendarId: "ikgp0sp9plhcqeoiuke2qq0ih0@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/ikgp0sp9plhcqeoiuke2qq0ih0%40group.calendar.google.com/public/basic.ics"
	},
	obGeneral: {
		calname: "OB General",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#8980f5",
		googleCalendarId: "f4n57uifpj05s2945h6l27kug0@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/f4n57uifpj05s2945h6l27kug0%40group.calendar.google.com/public/basic.ics"
	},
	painGeneral: {
		calname: "Pain Medicine General",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#21897e",
		googleCalendarId: "7gevrqttji77canr7ct3st8k5g@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/7gevrqttji77canr7ct3st8k5g%40group.calendar.google.com/public/basic.ics"
	},
	pedsGeneral: {
		calname: "Pediatrics General",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#7ebce6",
		googleCalendarId: "aupednsed436921h5c3vk071o4@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/aupednsed436921h5c3vk071o4%40group.calendar.google.com/public/basic.ics"
	},
	raapsGeneral: {
		calname: "RAAPS General",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#e0a890",
		googleCalendarId: "jj3jga30ru6bq5k51gpa3gikg8@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/jj3jga30ru6bq5k51gpa3gikg8%40group.calendar.google.com/public/basic.ics"
	},
	educationGeneral: {
		calname: "Education General",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#e19526",
		googleCalendarId: "bjkqif0rhlrd3ej3j0k4j8n770@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/bjkqif0rhlrd3ej3j0k4j8n770%40group.calendar.google.com/public/basic.ics"
	},
	facultyGeneral: {
		calname: "Faculty: General",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#e5e5e5",
		googleCalendarId: "l7krinp191p622u816kom5j2ik@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/l7krinp191p622u816kom5j2ik%40group.calendar.google.com/public/basic.ics"
	},
	facultyFroedtert: {
		calname: "Faculty: Froedtert Hospital",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#a9cdca",
		googleCalendarId: "05g7968vkgo6158612u2h2shf0@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/05g7968vkgo6158612u2h2shf0%40group.calendar.google.com/public/basic.ics"
	},
	facultyOB: {
		calname: "Faculty: OB Anesthesiology",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#d4d2ed",
		googleCalendarId: "9voq6dh3aqg3mt1qq4r9qdklfk@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/9voq6dh3aqg3mt1qq4r9qdklfk%40group.calendar.google.com/public/basic.ics"
	},
	facultyPainMedicine: {
		calname: "Faculty: Pain Medicine",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#a9c9c6",
		googleCalendarId: "ens7k86i7p9hk8h90cpsof58uc@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/ens7k86i7p9hk8h90cpsof58uc%40group.calendar.google.com/public/basic.ics"
	},
	facultyPediatric: {
		calname: "Faculty: Pediatric Anesthesiology",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#b7cede",
		googleCalendarId: "pqbl1mg5n1g1nk1g059ahuted0@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/pqbl1mg5n1g1nk1g059ahuted0%40group.calendar.google.com/public/basic.ics"
	},
	facultyVA: {
		calname: "Faculty: VA",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#858890",
		googleCalendarId: "sgtchsbrd5aaf0b1h3d56bepsc@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/sgtchsbrd5aaf0b1h3d56bepsc%40group.calendar.google.com/public/basic.ics"
	},
	fellowshipGeneral: {
		calname: "Fellowship: General",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#a0e788",
		googleCalendarId: "ln0hmp82j5un9hndask4p5sqo0@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/ln0hmp82j5un9hndask4p5sqo0%40group.calendar.google.com/public/basic.ics"
	},
	fellowshipCardio: {
		calname: "Fellowship: Cardiothoracic",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#83f4ac",
		googleCalendarId: "9drg248ejo47g4s5vhmsmoq58s@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/9drg248ejo47g4s5vhmsmoq58s%40group.calendar.google.com/public/basic.ics"
	},
	fellowshipCriticalCare: {
		calname: "Fellowship: Critical Care",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#89fe92",
		googleCalendarId: "0leqqe3qt6ih8epo7jl284forc@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/0leqqe3qt6ih8epo7jl284forc%40group.calendar.google.com/public/basic.ics"
	},
	fellowshipOB: {
		calname: "Fellowship: OB Anesthesiology",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#cffe89",
		googleCalendarId: "ffnqpmbetb5pq87tgr0drsq7vo@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/ffnqpmbetb5pq87tgr0drsq7vo%40group.calendar.google.com/public/basic.ics"
	},
	fellowshipPain: {
		calname: "Fellowship: Pain Medicine",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#98c93d",
		googleCalendarId: "7ae4r6dku53v3ebtaeu8r530ps@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/7ae4r6dku53v3ebtaeu8r530ps%40group.calendar.google.com/public/basic.ics"
	},
	fellowshipPeds: {
		calname: "Fellowship: Pediatric Anesthesiology",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#eef483",
		googleCalendarId: "8jpaef7e6964t96gc2rvbf6cd0@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/8jpaef7e6964t96gc2rvbf6cd0%40group.calendar.google.com/public/basic.ics"
	},
	fellowshipRAAPS: {
		calname: "Fellowship: RAAPS",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#a0e788",
		googleCalendarId: "sejqn73b10o8v8cna99e4spep8@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/sejqn73b10o8v8cna99e4spep8%40group.calendar.google.com/public/basic.ics"
	},
	mcw: {
		calname: "MCW",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#34596b",
		googleCalendarId: "4ap62tgtmi87q7va1gsetd6se8@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/4ap62tgtmi87q7va1gsetd6se8%40group.calendar.google.com/public/basic.ics"
	},
	msaCourse: {
		calname: "MSA Course Schedule",
		caldesc: "MSA Course Schedule",
		timezone: "America/Chicago",
		color: "#ded29e",
		source: "https://msa-course-schedule.mcw-anesthesiology.tech/fullcalendar",
		url: "https://msa-course-schedule.mcw-anesthesiology.tech/ical.ics"
	},
	lectures: {
		calname: "Lectures",
		caldesc: "Lectures imported from New Innovations",
		timezone: "America/Chicago",
		color: "#34596b",
		source: "https://new-innov-lectures.mcw-anesth.tech/api/fullcalendar"
	},
	internLectures: {
		calname: "Intern Lecture Series",
		caldesc: "Intern Lecture Series",
		timezone: "America/Chicago",
		color: "#d95be6",
		source: "https://www.mcwanet.com/wp-json/mcw-anesth-lectures/v1/lecture-series-calendar/15"
	},
	medicalStudents: {
		calname: "Medical Students",
		caldesc: "Medical Students",
		timezone: "America/Chicago",
		color: "#ff7537",
		googleCalendarId: "u5gi8hio0pf2jas1epc21ret98@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/u5gi8hio0pf2jas1epc21ret98%40group.calendar.google.com/public/basic.ics"
	},
	meetings: {
		calname: "Meetings: Society / Association",
		caldesc: "Meetings",
		timezone: "America/Chicago",
		color: "#faef36",
		googleCalendarId: "tji52cg95b6rqnp7c2e6ea637c@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/tji52cg95b6rqnp7c2e6ea637c%40group.calendar.google.com/public/basic.ics"
	},
	ca1Lectures: {
		calname: "CA-1 Lectures",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#b5dff4",
		showCalendarName: true,
		source: "https://www.mcwanet.com/wp-json/mcw-anesth-lectures/v1/lecture-series-calendar/11"
	},
	ca1Workshops: {
		calname: "CA-1 Workshops",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#a0e2ec",
		showCalendarName: true,
		source: "https://www.mcwanet.com/wp-json/mcw-anesth-lectures/v1/lecture-series-calendar/12"
	},
	ca23: {
		calname: "CA-2 & CA-3",
		caldesc: "CA-2 & CA-3 Lectures",
		timezone: "America/Chicago",
		color: "#8efbfd",
		showCalendarName: true,
		source: "https://www.mcwanet.com/wp-json/mcw-anesth-lectures/v1/lecture-series-calendar/1"
	},
	allClassMeetings: {
		calname: "All class meetings",
		caldesc: "Meetings for all residency classes",
		timezone: "America/Chicago",
		color: "#8ecbfd",
		source: "https://www.mcwanet.com/wp-json/mcw-anesth-lectures/v1/lecture-series-calendar/16"
	},
	journalClub: {
		calname: "Journal Club",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#8eaffd",
		showCalendarName: true,
		source: "https://www.mcwanet.com/wp-json/mcw-anesth-lectures/v1/lecture-series-calendar/17"
	},
	neuroLectures: {
		calname: "Neuro Anesthesia",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#a2bcfe",
		showCalendarName: true,
		source: "https://www.mcwanet.com/wp-json/mcw-anesth-lectures/v1/lecture-series-calendar/10"
	},
	cardiacLectures: {
		calname: "Cardiac Anesthesia Lectures",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#ff6767",
		showCalendarName: true,
		source: "https://www.mcwanet.com/wp-json/mcw-anesth-lectures/v1/lecture-series-calendar/23"
	},
	mentorMenteeBreakfast: {
		calname: "Mentor / Mentee Breakfast",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#9be0f7",
		source: "https://www.mcwanet.com/wp-json/mcw-anesth-lectures/v1/lecture-series-calendar/18"
	},
	tee: {
		calname: "TEE",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#508fff",
		source: "https://www.mcwanet.com/wp-json/mcw-anesth-lectures/v1/lecture-series-calendar/3"
	},
	facultyDevelopmentLectures: {
		calname: "Faculty Development Lecture Series",
		caldesc: "The Faculty Development Wednesday series will feature concise learning sessions aimed at helping you develop your career in academic medicine. The wide range of topics covered will help you enhance your skills as a teacher, cultivate your relationships with colleagues and trainees, learn about educational processes and much more!",
		timezone: "America/Chicago",
		color: "#999bbf",
		source: "https://www.mcwanet.com/wp-json/mcw-anesth-lectures/v1/lecture-series-calendar/22"
	},
	grandRounds: {
		calname: "Grand Rounds",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#34596b",
		source: "https://www.mcwanet.com/wp-json/mcw-anesth-lectures/v1/lecture-series-calendar/2"
	},
	visitingProfessor: {
		calname: "Visiting Professor",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#006f66",
		source: "https://www.mcwanet.com/wp-json/mcw-anesth-lectures/v1/lecture-series-calendar/13"
	},
	residencyGeneral: {
		calname: "Residency: General",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#9fc6e7",
		googleCalendarId: "bq6padl7b3gn95ic74r2u67pr8@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/bq6padl7b3gn95ic74r2u67pr8%40group.calendar.google.com/public/basic.ics"
	},
	residencyCVICU: {
		calname: "Residency: CVICU",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#9c9df4",
		googleCalendarId: "ltdk3c7lt3e3gdsote2m5urh64@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/ltdk3c7lt3e3gdsote2m5urh64%40group.calendar.google.com/public/basic.ics"
	},
	residencyNeuro: {
		calname: "Residency: Neuroanesthesia",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#a2bcfe",
		googleCalendarId: "p8l1qs074pppbtatgubc0q4mqs@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/p8l1qs074pppbtatgubc0q4mqs%40group.calendar.google.com/public/basic.ics"
	},
	residencyOB: {
		calname: "Residency: OB Anesthesia",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#a2ecfe",
		googleCalendarId: "k2a266jqhb13ajd3s8flcsuhi0@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/k2a266jqhb13ajd3s8flcsuhi0%40group.calendar.google.com/public/basic.ics"
	},
	residencyPain: {
		calname: "Residency: Pain Medicine",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#9a9cff",
		googleCalendarId: "m5jn569jehau7r7cokgvurnai4@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/m5jn569jehau7r7cokgvurnai4%40group.calendar.google.com/public/basic.ics"
	},
	residencyPeds: {
		calname: "Residency: Pediatric Anesthesia",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#9cf4ed",
		googleCalendarId: "55arr2h6m0nv69hcki3osi1ur8@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/55arr2h6m0nv69hcki3osi1ur8%40group.calendar.google.com/public/basic.ics"
	},
	research: {
		calname: "Research",
		caldesc: "Research",
		timezone: "America/Chicago",
		color: "#ac725e",
		"private": true,
		key: "intranet",
		googleCalendarId: "n4lb1pl97v5atmga646d09dde4@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/ical/n4lb1pl97v5atmga646d09dde4%40group.calendar.google.com/public/basic.ics"
	},
	"3rdFloorAnesConfRoom": {
		calname: "3rd Floor Anesthesia Conference Room",
		caldesc: "3rd Floor Anesthesia Conference Room Reservations",
		timezone: "America/Chicago",
		color: "#039be5",
		"private": true,
		key: "intranet",
		googleCalendarId: "mcw.anesthesiology.rooms@gmail.com",
		url: "https://calendar.google.com/calendar/embed?src=mcw.anesthesiology.rooms%40gmail.com&ctz=America%2FChicago"
	},
	LLAnesConfRoom: {
		calname: "Lower Level Anesthesia Conference Room",
		caldesc: "Lower Level Anesthesia Conference Room Reservations",
		timezone: "America/Chicago",
		color: "#8e24aa",
		"private": true,
		key: "intranet",
		googleCalendarId: "2htc96povnfdq5k5s8t2eij5t8@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/embed?src=2htc96povnfdq5k5s8t2eij5t8%40group.calendar.google.com&ctz=America%2FChicago"
	},
	residentLibrary: {
		calname: "Resident Library - 3rd Floor",
		caldesc: "Resident Library - 3rd Floor Reservations",
		timezone: "America/Chicago",
		color: "#3f51b5",
		"private": true,
		key: "intranet",
		googleCalendarId: "qmrbdq89eiq3muck118jrpjuqo@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/embed?src=qmrbdq89eiq3muck118jrpjuqo%40group.calendar.google.com&ctz=America%2FChicago"
	},
	residentLounge: {
		calname: "Resident Lounge - 3rd Floor",
		caldesc: "Resident Lounge - 3rd Floor Reservations",
		timezone: "America/Chicago",
		color: "#7986cb",
		"private": true,
		key: "intranet",
		googleCalendarId: "76l05mb00s7e4n2p1stetbufj0@group.calendar.google.com",
		url: "https://calendar.google.com/calendar/embed?src=76l05mb00s7e4n2p1stetbufj0%40group.calendar.google.com&ctz=America%2FChicago"
	}
};
var calendarGroups = {
	basic: {
		calname: "MCW Anesthesiology",
		caldesc: "Master departmental calendar.",
		timezone: "America/Chicago",
		color: "#006f66",
		subGroups: [
			"residency",
			"fellowships",
			"interns",
			"education",
			"clinical",
			"subspecialtyCardio",
			"subspecialtyCriticalCare",
			"subspecialtyNeuro",
			"subspecialtyOB",
			"subspecialtyPain",
			"subspecialtyPeds",
			"subspecialtyRAAPS",
			"general"
		],
		calendars: [
			"lectures",
			"grandRounds",
			"visitingProfessor",
			"research",
			"facultyDevelopmentLectures"
		]
	},
	general: {
		calname: "Department General",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#888",
		calendars: [
			"departmentGeneral",
			"administrativeGeneral",
			"mcw"
		]
	},
	clinical: {
		calname: "Clinical",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#e5e5e5",
		calendars: [
			"facultyGeneral",
			"facultyFroedtert",
			"facultyOB",
			"facultyPainMedicine",
			"facultyPediatric",
			"facultyVA"
		]
	},
	education: {
		calname: "Education",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#e19526",
		subGroups: [
			"residency",
			"fellowships",
			"interns"
		],
		calendars: [
			"educationGeneral",
			"lectures",
			"grandRounds",
			"visitingProfessor",
			"medicalStudents",
			"cardioGeneral",
			"criticalCareGeneral",
			"neuroGeneral",
			"obGeneral",
			"painGeneral",
			"pedsGeneral",
			"raapsGeneral",
			"research"
		]
	},
	gme: {
		calname: "Graduate Medical Education",
		caldesc: "Residency and Fellowships",
		timezone: "America/Chicago",
		color: "#93d7be",
		subGroups: [
			"residency",
			"fellowships"
		]
	},
	interns: {
		calname: "Interns",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#f48ffe",
		calendars: [
			"lectures",
			"internLectures"
		]
	},
	residency: {
		calname: "Residency",
		caldesc: "Departmental residency education calendar.",
		timezone: "America/Chicago",
		color: "#9fc6e7",
		calendars: [
			"educationGeneral",
			"lectures",
			"grandRounds",
			"visitingProfessor",
			"ca1Lectures",
			"ca1Workshops",
			"ca23",
			"allClassMeetings",
			"journalClub",
			"neuroLectures",
			"cardiacLectures",
			"mentorMenteeBreakfast",
			"tee",
			"residencyGeneral",
			"residencyCVICU",
			"residencyNeuro",
			"residencyOB",
			"residencyPain",
			"residencyPeds"
		],
		aliases: [
			"residents"
		]
	},
	fellowships: {
		calname: "Fellowships",
		caldesc: "Departmental fellowships education calendar.",
		timezone: "America/Chicago",
		color: "#a0e788",
		calendars: [
			"fellowshipGeneral",
			"fellowshipCardio",
			"fellowshipCriticalCare",
			"fellowshipOB",
			"fellowshipPain",
			"fellowshipPeds",
			"fellowshipRAAPS",
			"lectures"
		]
	},
	subspecialtyCardio: {
		calname: "Subspecialty: Cardiothoracic",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#ff5654",
		calendars: [
			"cardioGeneral",
			"fellowshipCardio"
		]
	},
	subspecialtyCriticalCare: {
		calname: "Subspecialty: Critical Care",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#c84d59",
		calendars: [
			"criticalCareGeneral",
			"residencyCVICU",
			"fellowshipCriticalCare"
		]
	},
	subspecialtyNeuro: {
		calname: "Subspecialty: Neuroanesthesia",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#58d7f1",
		calendars: [
			"neuroGeneral",
			"residencyNeuro"
		]
	},
	subspecialtyOB: {
		calname: "Subspecialty: OB Anesthesia",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#8980f5",
		calendars: [
			"obGeneral",
			"residencyOB",
			"facultyOB",
			"fellowshipOB"
		]
	},
	subspecialtyPain: {
		calname: "Subspecialty: Pain Medicine",
		caldesc: "",
		timezone: "America/Chicago",
		color: "#21897e",
		calendars: [
			"painGeneral",
			"residencyPain",
			"fellowshipPain",
			"facultyPainMedicine"
		]
	},
	subspecialtyPeds: {
		calname: "Subspecialty: Pediatric Anesthesia",
		caldesc: "",
		color: "#7ebce6",
		calendars: [
			"pedsGeneral",
			"residencyPeds",
			"fellowshipPeds",
			"facultyPediatric"
		]
	},
	subspecialtyRAAPS: {
		calname: "Subspecialty: RAAPS",
		caldesc: "",
		color: "#e0a890",
		calendars: [
			"raapsGeneral",
			"fellowshipRAAPS"
		]
	},
	departmentRoomReservations: {
		calname: "Department Room Reservations",
		caldesc: "Department Room Reservations",
		timezone: "America/Chicago",
		color: "#039be5",
		"private": true,
		key: "intranet",
		calendars: [
			"3rdFloorAnesConfRoom",
			"LLAnesConfRoom",
			"residentLibrary",
			"residentLounge"
		]
	}
};
var calendarTree = {
	items: [
		{
			label: "General",
			items: [
				"general",
				"lectures",
				"grandRounds",
				"visitingProfessor",
				"administrativeGeneral",
				"cardioGeneral",
				"criticalCareGeneral",
				"neuroGeneral",
				"obGeneral",
				"painGeneral",
				"pedsGeneral",
				"raapsGeneral",
				"educationGeneral"
			]
		},
		{
			label: "Clinical",
			items: [
				"facultyGeneral",
				"facultyFroedtert",
				"facultyOB",
				"facultyPainMedicine",
				"facultyPediatric",
				"facultyVA"
			]
		},
		{
			label: "Fellowships",
			items: [
				"fellowshipGeneral",
				"fellowshipCardio",
				"fellowshipCriticalCare",
				"fellowshipOB",
				"fellowshipPain",
				"fellowshipPeds",
				"fellowshipRAAPS",
				"lectures"
			]
		},
		{
			label: "Residency",
			items: [
				"lectures",
				"ca1Lectures",
				"ca1Workshops",
				"ca23",
				"allClassMeetings",
				"journalClub",
				"neuroLectures",
				"cardiacLectures",
				"mentorMenteeBreakfast",
				"tee",
				"residencyGeneral",
				"residencyCVICU",
				"residencyNeuro",
				"residencyOB",
				"residencyPain",
				"residencyPeds"
			]
		},
		{
			label: "Interns",
			items: [
				"internLectures",
				"lectures"
			]
		},
		"medicalStudents",
		"facultyDevelopmentLectures",
		"msaCourse",
		"mcw",
		"research",
		"departmentRoomReservations"
	]
};
var calendarGroupTree = {
	items: [
		"basic",
		"general",
		"clinical",
		"education",
		"gme",
		"residency",
		"fellowships",
		"interns",
		"facultyDevelopmentLectures",
		"subspecialtyCardio",
		"subspecialtyCriticalCare",
		"subspecialtyNeuro",
		"subspecialtyOB",
		"subspecialtyPain",
		"subspecialtyPeds",
		"subspecialtyRAAPS",
		"medicalStudents",
		"msaCourse",
		"mcw",
		"research",
		"departmentRoomReservations"
	]
};
var combine = {
	calname: "Custom Calendar",
	caldesc: "",
	timezone: "America/Chicago"
};
var env = {
	TRUSTED_ORIGINS: TRUSTED_ORIGINS,
	GOOGLE_CALENDAR_API_KEY: GOOGLE_CALENDAR_API_KEY,
	GOOGLE_ANALYTICS_TRACKING_ID: GOOGLE_ANALYTICS_TRACKING_ID,
	FIREBASE_CONFIG: FIREBASE_CONFIG,
	calendars: calendars,
	calendarGroups: calendarGroups,
	calendarTree: calendarTree,
	calendarGroupTree: calendarGroupTree,
	combine: combine
};

var env$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  TRUSTED_ORIGINS: TRUSTED_ORIGINS,
  GOOGLE_CALENDAR_API_KEY: GOOGLE_CALENDAR_API_KEY,
  GOOGLE_ANALYTICS_TRACKING_ID: GOOGLE_ANALYTICS_TRACKING_ID,
  FIREBASE_CONFIG: FIREBASE_CONFIG,
  calendars: calendars,
  calendarGroups: calendarGroups,
  calendarTree: calendarTree,
  calendarGroupTree: calendarGroupTree,
  combine: combine,
  'default': env
});

var dotenv = getCjsExportFromNamespace(env$1);

/** @format */

/* eslint-env node */

var parse = url__default['default'].parse;
var basename = path__default['default'].basename;
var getIcalsFromUrls$1 = serverUtils.getIcalsFromUrls,
    getIcalsFromFullCalendarEventSourceCalendars$1 = serverUtils.getIcalsFromFullCalendarEventSourceCalendars,
    setHeaders$1 = serverUtils.setHeaders,
    isCalendarVisible$1 = serverUtils.isCalendarVisible,
    getDeepCalendarIdsFromSubGroups$1 = serverUtils.getDeepCalendarIdsFromSubGroups;

var calendarHandler = function calendarHandler(req, res) {
  var _parse = parse(req.url, true),
      query = _parse.query,
      pathname = _parse.pathname;

  var isVisible = function isVisible(calendar) {
    return isCalendarVisible$1(calendar, query.key);
  };

  var calendarName = basename(pathname, ".ics");
  var calendar = dotenv.calendars && dotenv.calendars[calendarName] || dotenv.calendarGroups && dotenv.calendarGroups[calendarName];

  if (!calendar || !isVisible(calendar)) {
    res.writeHead(501);
    res.end();
    return;
  }

  var urls = [];
  var sourceCalendars = [];

  if (calendar.url) {
    urls.push(calendar.url);
  } else if (calendar.source) {
    sourceCalendars.push(calendar);
  }

  if (calendar.calendars || calendar.subGroups) {
    var calIds = getDeepCalendarIdsFromSubGroups$1(calendar, dotenv.calendars, dotenv.calendarGroups);

    var _iterator = _createForOfIteratorHelper(calIds),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var calId = _step.value;
        var _calendar = dotenv.calendars[calId];

        if (isVisible(_calendar)) {
          if (_calendar.url) {
            urls.push(_calendar.url);
          } else if (_calendar.source) {
            sourceCalendars.push(_calendar);
          }

          if (_calendar.subCalendars) {
            var visible = _calendar.subCalendars.filter(isVisible);

            urls = urls.concat(visible.map(function (subCal) {
              return subCal.url;
            }).filter(Boolean));
            sourceCalendars = sourceCalendars.concat(visible.filter(function (subCal) {
              return subCal.source;
            }));
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  if (calendar.subCalendars) {
    var _visible = calendar.subCalendars.filter(isVisible);

    urls = urls.concat(_visible.map(function (subCal) {
      return subCal.url;
    }));
    sourceCalendars = sourceCalendars.concat(_visible.filter(function (subCal) {
      return subCal.source;
    }));
  }

  urls = Array.from(new Set(urls));
  sourceCalendars = Array.from(new Set(sourceCalendars));
  var icals = Promise.all([getIcalsFromUrls$1(urls), getIcalsFromFullCalendarEventSourceCalendars$1(sourceCalendars)]).then(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        urlIcals = _ref2[0],
        fcIcals = _ref2[1];

    return urlIcals.concat(fcIcals);
  });
  setHeaders$1(res);
  var options = Object.assign({}, calendar);
  icals.then(function (icals) {
    res.writeHead(200);
    res.end(src(icals, options));
  }).catch(function (err) {
    console.error("Error merging: ".concat(err));
    res.writeHead(500);
    res.end();
  });
};

/** @format */

/* eslint-env node */

var parse$1 = url__default['default'].parse;
var getIcalsFromUrls$2 = serverUtils.getIcalsFromUrls,
    setHeaders$2 = serverUtils.setHeaders;
var URL_PROPS = ["url", "urls", "urls[]"];

var combineHandler = function combineHandler(req, res) {
  var _parse = parse$1(req.url, true),
      query = _parse.query;

  var urls = [];

  var _iterator = _createForOfIteratorHelper(URL_PROPS),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var prop = _step.value;

      if (query[prop]) {
        urls = urls.concat(query[prop]);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (!urls) {
    res.writeHead(400);
    res.end();
    return;
  }

  var icals = getIcalsFromUrls$2(urls);
  setHeaders$2(res);
  var options = {};
  if (dotenv && dotenv.combine) options = Object.assign({}, dotenv.combine);
  options = Object.assign({}, options, query);
  icals.then(function (icals) {
    res.writeHead(200);
    res.end(src(icals, options));
  }).catch(function (err) {
    console.error("Error merging: ".concat(err));
    res.writeHead(500);
    res.end();
  });
};

/* eslint-env node */

var app = express__default['default']();
app.use(express__default['default'].static('public'));
app.get('/env.json', function (req, res) {
  var options = {
    root: './',
    dotfiles: 'allow'
  };
  res.sendFile('env.json', options);
});
app.get('/combine.ics', combineHandler);

if (dotenv && dotenv.calendars) {
  for (var calendarName in dotenv.calendars) {
    app.get("/".concat(calendarName, ".ics"), calendarHandler);
  }

  if (dotenv.calendarGroups) {
    for (var _calendarName in dotenv.calendarGroups) {
      app.get("/".concat(_calendarName, ".ics"), calendarHandler);
    }
  }
}

app.get('/:calendarId', function (req, res) {
  res.sendFile('index.html', {
    root: './public/'
  });
});
var port = process.env.PORT;

if (!port && app.get('env') !== 'production') {
  port = 3000;
}

app.listen(port, function () {
  console.log("Listening on ".concat(port)); // eslint-disable-line no-console
});
var server = {};

module.exports = server;
