function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* eslint-env node */
var fetch = require('node-fetch');

var fullCalendarEventsToIcs = require('./fullcalendar-to-ics.js');

function setHeaders(res) {
  res.setHeader('Expires', 'Mon, 01 Jan 1990 00:00:00 GMT');
  res.setHeader('Date', new Date().toGMTString());
  res.setHeader('Content-Type', 'text/calendar; charset=UTF-8');
  res.setHeader('Cache-Control', 'no-cache, no-store, max-age=0, must-revalidate');
  res.setHeader('Pragma', 'no-cache');
}

function getIcalsFromUrls(urls) {
  var promises = [];

  var _iterator = _createForOfIteratorHelper(urls),
      _step;

  try {
    var _loop = function _loop() {
      var url = _step.value;
      promises.push(fetch(url).then(function (response) {
        return response.text();
      }).catch(function (err) {
        console.error("Error reading ".concat(url, ": ").concat(err));
        return err;
      }));
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return Promise.all(promises);
}

function getIcalsFromFullCalendarEventSourceCalendars(calendars) {
  var promises = [];

  var _iterator2 = _createForOfIteratorHelper(calendars),
      _step2;

  try {
    var _loop2 = function _loop2() {
      var calendar = _step2.value;
      promises.push(fetch(calendar.source).then(function (response) {
        return response.json();
      }).then(function (events) {
        return fullCalendarEventsToIcs(events, calendar);
      }).catch(function (err) {
        console.error('Error parsing calendar', err, calendar);
        return err;
      }));
    };

    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      _loop2();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return Promise.all(promises);
}

function isCalendarVisible(calendar, keys) {
  if (!Array.isArray(keys)) keys = [keys];
  return calendar && (!calendar.private || Boolean(calendar.key) && typeof calendar.key === 'string' && keys.includes(calendar.key));
}

function getDeepCalendarIdsFromSubGroups(calendarGroup, allCalendars, allCalendarGroups) {
  var calendarIds = [];

  if (calendarGroup.calendars && calendarGroup.calendars.length > 0) {
    calendarIds.push.apply(calendarIds, _toConsumableArray(calendarGroup.calendars));
  }

  if (calendarGroup.subGroups && calendarGroup.subGroups.length > 0) {
    var subGroups = calendarGroup.subGroups.map(function (id) {
      return allCalendarGroups[id];
    });

    var _iterator3 = _createForOfIteratorHelper(subGroups),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var subGroup = _step3.value;
        calendarIds.push.apply(calendarIds, _toConsumableArray(getDeepCalendarIdsFromSubGroups(subGroup, allCalendars, allCalendarGroups)));
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }

  return calendarIds;
}

module.exports = {
  setHeaders: setHeaders,
  getIcalsFromUrls: getIcalsFromUrls,
  getIcalsFromFullCalendarEventSourceCalendars: getIcalsFromFullCalendarEventSourceCalendars,
  isCalendarVisible: isCalendarVisible,
  getDeepCalendarIdsFromSubGroups: getDeepCalendarIdsFromSubGroups
};
